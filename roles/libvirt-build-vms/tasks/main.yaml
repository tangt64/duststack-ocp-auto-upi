---
# tasks file for libvirt-build-vms
- name: check to the libvirt network list
  shell: virsh net-list
  register: check_virt_nets

- name: check to the nested mode is enabled
  shell: cat /etc/modprobe.d/kvm.conf
  register: check_kvm
  
- name: enable to nested function to kvm module
  lineinfile:
    path: /etc/modprobe.d/kvm.conf
    line: options kvm_intel nested=Y
    create: yes
  when: libvirtd_nested and "kvm_intel nested=Y" not in check_kvm.stdout

- block:
  - name: remove KVM module
    command: modprobe -r kvm_intel
  - name: load KVM module
    command: modprobe kvm_intel
  when: check_kvm.stdout.find('kvm_intel nested=Y') != -1

- name: add 8080/tcp to firewalld
  firewalld:
    port: 8080/tcp
    permanent: true
    state: enabled
    zone: libvirt

- name: install Virtulization packages
  package:
    name: "{{ item }}"
    state: present
  loop:
    - "@Server with GUI"
    - "@Virtualization Host"
    - virt-install
    - libguestfs-tools-c
    
- name: install python3 package for httpd.py
  package:
    name: "{{ item }}"
    state: latest
  loop:
    - python3

- name: mkdir a build directory
  file:
    path: "{{ ocp_work_dir }}"
    state: directory

- name: mkdir a install_dir directory under the build directory
  file:
    path: "{{ ocp_work_dir }}/install_dir"
    state: directory

- name: make a directory for rhcos
  file:
    state: directory
    path: '{{ item }}'
    recurse: yes
  loop:
    - "{{ ocp_work_dir }}/rhcos-install"

- name: Build RHCOS treeinfo for kernel and initramfs
  tags: build-rhcos
  shell: |
    cat << EOF > {{ ocp_work_dir }}/rhcos-install/.treeinfo
    [general]
    arch = x86_64
    family = Red Hat CoreOS
    platforms = x86_64
    version = {{ ocp_version }}
    [images-x86_64]
    initrd = initramfs.img
    kernel = vmlinuz
    EOF

- name: RHCOS metal image download from local
  copy:
    src: "files/images/{{ item }}"
    dest: "{{ ocp_work_dir }}"
  loop:
    - "{{ rhn_rhcos_image }}"
    - "{{ rhn_rhcos_kernel }}"
    - "{{ rhn_rhcos_initramfs }}"
  when: rhcos_image_installer_location == "local"

- name: RHCOS metal image download from remote
  get_url:
    url: "{{ rhn_rhcos_url }}/{{ rhn_rhcos_major }}/{{ rhn_rhcos_minor }}/{{ item }}"
    dest: "{{ ocp_work_dir }}"
  loop:
    - "{{ rhn_rhcos_image }}"
    - "{{ rhn_rhcos_kernel }}"
    - "{{ rhn_rhcos_initramfs }}"
  when: rhcos_image_installer_location == "remote"

- name: download openshift v4 client and installer files from local
  tags: build-rhcos
  copy:
    src: "files/common/{{ item }}"
    dest: "{{ ocp_work_dir }}"
  loop:
    - openshift-client-linux.tar.gz
    - openshift-install-linux.tar.gz
  when: rhcos_image_installer_location == "local"

- name: download openshift v4 client and installer files from online
  tags: build-rhcos
  get_url:
    url: https://mirror.openshift.com/pub/openshift-v4/clients/ocp/{{ item }}
    dest: "{{ ocp_work_dir }}"
  loop:
    - "{{ ocp_version }}/openshift-client-linux.tar.gz"
    - "{{ ocp_version }}/openshift-install-linux.tar.gz"
  when: rhcos_image_installer_location == "remote"

- name: copy these client, installer files to "rhcos-install"
  copy:
    src: "{{ ocp_work_dir }}/{{ item.srcimg }}"
    dest: "{{ ocp_work_dir }}/rhcos-install/{{ item.destimg }}"
    force: true
    remote_src: yes
  loop:
    - { srcimg: 'rhcos-installer-kernel-x86_64', destimg: 'vmlinuz' }
    - { srcimg: 'rhcos-installer-initramfs.x86_64.img', destimg: 'initramfs.img'}
    - { srcimg: 'rhcos-metal.x86_64.raw.gz', destimg: 'rhcos-metal.x86_64.raw.gz'}

- name: unarchive openshift client and installer file
  tags: build-rhcos
  unarchive:
    src: "{{ ocp_work_dir }}/{{ item }}"
    dest: "{{ ocp_work_dir }}"
  loop:
    - openshift-client-linux.tar.gz
    - openshift-install-linux.tar.gz

- name: firewalld add to port number
  tags: build-rhcos
  firewalld:
    zone: public
    port: "{{ item }}"
    permanent: yes
    state: enabled
  loop:
    - 8080/tcp
    - 5000/tcp

- name: download openshift v4 client and installer from files from local
  tags: build-rhcos
  copy:
    src: "{{ ansible_env.HOME }}/{{ ocp_playbook_src_dir }}/files/common/{{ item }}"
    dest: "{{ ocp_work_dir }}"
    remote_src: yes
  loop:
    - haproxy.cfg
    - httpd.py

- name: read the ssh public key file
  tags: ocp_public_key
  slurp:
    src: "{{ ocp_public_keyfile }}"
  register: ocp_public_key
  become: no

- name: Generate to OCP4 install-config.yaml
  tags: install-config
  template:
    src: install-config.yaml.j2
    dest: "{{ ocp_work_dir }}/install_dir/install-config.yaml"

- name: openshift ignition config
  tags: install-config
  command: "{{ ocp_work_dir }}/openshift-install create ignition-configs --dir={{ ocp_work_dir }}/install_dir"

- name: based rhel-kvm image for LB and Utility
  block:
    - name: copy a rhel-kvm image for L/B and Utility
      copy:
        src: '{{ ansible_env.HOME }}/{{ ocp_playbook_src_dir }}/files/images/{{ rhn_rhel_image_name }}'
        dest: /var/lib/libvirt/images/{{ ocp_cluster_name }}-{{ item }}.qcow2
      loop:
        - haproxy
        - utility

    - name: resize of rhel-kvm image
      shell: qemu-img resize /var/lib/libvirt/images/{{ ocp_cluster_name }}-{{ item }}.qcow2 {{ libvirt_disk_size[:2] }}
      loop:
        - utility
        - haproxy
  when: not rhn_rhel_image_use|bool
  tags: img-build

- block:
  - name: build a utility/haproxy node disk
    shell: qemu-img create -f qcow2 /var/lib/libvirt/images/{{ ocp_cluster_name }}-{{ item }}.qcow2 {{ libvirt_disk_size[:2] }}
    loop:
      - utility
      - haproxy
  when: rhn_rhel_image_use == "no"
  tags: img-build

- block:
  - name: create ocp80/133 network on libvirtd
    virt_net:
      name: ocp80/133
      command: define
      xml: "{{ item }}"
    loop:
      - "{{ lookup('template','ocp133.xml.j2') }}"
      - "{{ lookup('template','ocp80.xml.j2') }}"

  - name: start the ocp80/133 network
    virt_net:
      autostart: yes
      name: "{{ item }}"
    loop:
      - ocp80
      - ocp133

  - name: active the ocp80/133 network
    virt_net:
      name: "{{ item }}"
      state: active
    loop:
      - ocp80
      - ocp133
  tags: img-build
  when: "'ocp133' not in check_virt_nets.stdout"

- name: create the pull_secret as file 
  copy:
    content: "{{ pull_sec }}"
    dest: "{{ ocp_work_dir }}/ocp4_pull_secret"

- name: generate to kickstart template files for the utility and haproxy for Centos 7
  tags: ttt
  template:
    src: "{{ item }}"
    dest: "{{ ocp_work_dir }}"
  loop:
    - haproxy.ks
    - utility.ks
  when: ocp_rhel_os_variant == "rhel7.0"

- name: generate to kickstart template files for the utility and haproxy for Centos 8
  tags: ttt
  template:
    src: "{{ item.src }}"
    dest: "{{ ocp_work_dir }}/{{ item.dest}}"
  loop:
    - { src: 'kickstart-haproxy-rhel-8.cfg', dest: 'haproxy.ks' }
    - { src: 'kickstart-utility-rhel-8.cfg', dest: 'utility.ks' }
  when: ocp_rhel_os_variant == "rhel8.0"

- name: run httpd.py server 
  shell: nohup python3 {{ ocp_work_dir }}/httpd.py &

- name: create a utility node
  tags: build-utility
  shell: virt-install --name {{ ocp_cluster_name }}-utility -r {{ utility_nodes_memory }} --vcpus {{ utility_nodes_cpu }} -l {{ rhel_mirror_url }} --network network={{ ocp_vir_net }} --network network={{ ocp_vir_net_internal }} --graphics spice -v --disk=path=/var/lib/libvirt/images/{{ ocp_cluster_name }}-utility.qcow2,format=qcow2,size={{ libvirt_disk_size[:2] }} --noautoconsole -x ks="http://{{ ocp_ignition_url }}:8080/utility.ks biosdevname=0 net.ifnames=0"

- name: create a haproxy node
  tags: build-haproxy
  shell: virt-install --name {{ ocp_cluster_name }}-haproxy -r {{ utility_nodes_memory }} --vcpus {{ utility_nodes_cpu }} -l {{ rhel_mirror_url }} --network network={{ ocp_vir_net }} --network network={{ ocp_vir_net_internal }} --graphics spice -v --disk=path=/var/lib/libvirt/images/{{ ocp_cluster_name }}-haproxy.qcow2,format=qcow2,size={{ libvirt_disk_size[:2] }} --noautoconsole -x ks="http://{{ ocp_ignition_url }}:8080/haproxy.ks biosdevname=0 net.ifnames=0"

- name: wait for build a VMs
  pause: 
    minutes: 10

- name: customized the utility node
  tags: build-utility-customized
  shell: LIBGUESTFS_BACKEND=direct virt-customize -m {{ utility_nodes_memory }} -a /var/lib/libvirt/images/{{ ocp_cluster_name }}-{{ item }}.qcow2 --uninstall cloud-init --ssh-inject root:file:{{ ocp_public_keyfile }} --selinux-relabel
  loop:
    - utility
    - haproxy

- name: start the utility and haproxy server
  tags: start-haut
  virt:
    name: "{{ item }}"    
    state: running
  loop:
    - "{{ ocp_cluster_name }}-utility"
    - "{{ ocp_cluster_name }}-haproxy"

- name: archive materials
  archive:
    path: /tmp/ocp-upi
    dest: /tmp/ocp-upi.tar.bz2    
  tags: ocp-upi

- name: push the material archive upi.tar.bz2 file to utility
  copy:
    src: /tmp/ocp-upi.tar.bz2
    dest: /tmp/ocp-upi.tar.bz2
  tags: ocp-upi
